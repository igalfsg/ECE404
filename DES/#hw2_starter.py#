#!/usr/bin/env/python

### hw2_starter.py

import sys
from BitVector import * 

################################   Initial setup  ################################

# Expansion permutation (See Section 3.3.1):
expansion_permutation = [31, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 
9, 10, 11, 12, 11, 12, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 19, 
20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 28, 29, 30, 31, 0]

# P-Box permutation (the last step of the Feistel function in Figure 4):
p_box_permutation = [15,6,19,20,28,11,27,16,0,14,22,25,4,17,30,9,
1,7,23,13,31,26,2,8,18,12,29,5,21,10,3,24]

# Initial permutation of the key (See Section 3.3.6):
key_permutation_1 = [56,48,40,32,24,16,8,0,57,49,41,33,25,17,9,1,58,
50,42,34,26,18,10,2,59,51,43,35,62,54,46,38,30,22,14,6,61,53,45,37,
29,21,13,5,60,52,44,36,28,20,12,4,27,19,11,3]

# Contraction permutation of the key (See Section 3.3.7):
key_permutation_2 = [13,16,10,23,0,4,2,27,14,5,20,9,22,18,11,3,25,
7,15,6,26,19,12,1,40,51,30,36,46,54,29,39,50,44,32,47,43,48,38,55,
33,52,45,41,49,35,28,31]

# Each integer here is the how much left-circular shift is applied
# to each half of the 56-bit key in each round (See Section 3.3.5):
shifts_key_halvs = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1] 




###################################   S-boxes  ##################################

# Now create your s-boxes as an array of arrays by reading the contents
# of the file s-box-tables.txt:
box_file = []
with open('s-box-tables.txt') as f:
    for line in f:
        box_file.append(line.split())
s_box = []
ind_s = 0
f_box = []
for index in range(len(box_file)):
    if box_file[index] and box_file[index][0][0] == 'S':
        index = index + 1
        while not box_file[index]:
            index = index + 1
        for i in range(4):
            f_box.append(box_file[index])
            index = index + 1
        s_box.append(f_box)
        f_box = []
        ind_s = ind_s + 1

#######################  Get encryptin key from user  ###########################
    ## ask user for input
def get_encryption_key(): # key                                                              
    key = None 
    f = open('key.txt', 'r')
    rkey=f.read()
    key = rkey[:8]#make key 8 characters
    ## make sure it satisfies any constraints on the key
    ## next, construct a BitVector from the key 
    user_key_bv = BitVector(textstring = key)   
    key_bv = user_key_bv.permute(key_permutation_1 )        ## permute() is a BitVector function
    return key_bv


################################# Generatubg round keys  ########################
def extract_round_key( nkey ): # round key 
    round_key = []
    for i in range(16):
         [left,right] = nkey.divide_into_two()   ## divide_into_two() is a BitVector function
         left << shifts_key_halvs[i]
         right << shifts_key_halvs[i]
         temp = left + right
         tempo = temp.permute(key_permutation_2 ) 
         round_key.append(tempo)
    return round_key


########################## encryption and decryption #############################

def des(e_or_d, input_file, output_file, keys ): 
    FILEOUT = open( output_file, 'ab' ) 
    bv = BitVector( filename = input_file )
    while (bv.more_to_read ):
        bitvec = bv.read_bits_from_file( 64 )   ## assumes that your file has an integral
        leng = bitvec.length()                                        ## multiple of 8 bytes. If not, you must pad it.
        pad = 64 - leng
        bitvec.pad_from_right(pad)
        [LE, RE] = bitvec.divide_into_two()   
        if e_or_d == 1 :#encription
            for i in range(16):        
                righty = RE.permute(expansion_permutation)
                resultxor = righty ^ keys[i]
                #s substitution
                temp_bv = BitVector(size = 6)
                row_bv = BitVector(size = 2)
                col_bv = BitVector(size = 4)
                ini=0
                fin=6
                inf=0
                fif=4
                final_bv = BitVector(size = 32)
                #good morning future igal here is what u need to do:
               #get 6 bits transform them put them in final bv through another bv getting from int
                for k in range(8):
                    temp_bv = resultxor[ini:fin]
                    row_bv[0:1] = temp_bv[0:1]
                    row_bv[1:2] = temp_bv[5:6]
                    col_bv = temp_bv[1:5]
                    row = row_bv.int_val()#get row
                    col = col_bv.int_val()#get column      
                    #get stuff from sbox 
                    newd = s_box[k][row][col]
                    temp_i = int(newd)
                    temp = BitVector(intVal = temp_i)
                    temp_leng = temp.length()
                    lpad = 4 - temp_leng
                    temp.pad_from_left(lpad)
                    final_bv[inf:fif] = temp
                    inf = inf + 4
                    fif = fif + 4
                    ini = ini + 6#increase to the next thing
                    fin = fin + 6#increase to th next chunck
                #permutation with p box
                last_p = final_bv.permute(p_box_permutation)
                #xor with le result = RE
                temporal = RE
                RE = last_p ^ LE
                LE = temporal #le equals old re
            
                
            #for loop done
            
            #put left + right on output file
            file_writebv =  RE + LE
           

            file_writebv.write_to_file(FILEOUT)
        else:
            for i in range(16):        
                righty = RE.permute(expansion_permutation)
                resultxor = righty ^ keys[15 - i]
                #s substitution
                temp_bv = BitVector(size = 6)
                row_bv = BitVector(size = 2)
                col_bv = BitVector(size = 4)
                ini=0
                fin=6
                inf=0
                fif=4
                final_bv = BitVector(size = 32)
                #good morning future igal here is what u need to do:
                #get 6 bits transform them put them in final bv through another bv getting from int
                for k in range(8):
                    temp_bv = resultxor[ini:fin]
                    row_bv[0:1] = temp_bv[0:1]
                    row_bv[1:2] = temp_bv[5:6]
                    col_bv = temp_bv[1:5]
                    row = row_bv.int_val()#get row
                    col = col_bv.int_val()#get column      
                    #get stuff from sbox 
                    newd = s_box[k][row][col]
                    temp_i = int(newd)
                    temp = BitVector(intVal = temp_i)
                    temp_leng = temp.length()
                    lpad = 4 - temp_leng
                    temp.pad_from_left(lpad)
                    final_bv[inf:fif] = temp
                    inf = inf + 4
                    fif = fif + 4
                    ini = ini + 6#increase to the next thing
                    fin = fin + 6#increase to th next chunck
                #permutation with p box
                last_p = final_bv.permute(p_box_permutation)
                #xor with le result = RE
                temporal = RE
                RE = last_p ^ LE
                LE = temporal #le equals old re
            #for loop done
            
            #put left + right on output file
            file_writebv = RE + LE
            file_writebv.write_to_file(FILEOUT)   
         



#################################### main #######################################

def main():
    ## write code that prompts the user for the key
    ## and then invokes the functionality of your implementation
    lakey = get_encryption_key()
    round_keys = extract_round_key(lakey)
    des(1, 'message.txt', 'encrypted.txt', round_keys)
    des(2, 'encrypted.txt', 'decrypted.txt', round_keys)
if __name__ == "__main__":
    main()

